-- Data Query Language --;
            DQL commands are used for fetching data from a relational database. They perform read-only queries of data. The only command, 
            'SELECT' is equivalent to the projection operation in relational algebra. 
            it command selects the attribute based on the condition described by the WHERE clause and returns them.

            Select is one of the most important SQL commands. It is used to retrieve data from a database. 
            One can fetch either the entire table or some data according to specified rules. 
            The data returned is stored in a result table. With the SELECT clause of a SELECT command statement, 
            we specify the columns that we want to be displayed in the query result and, optionally, which column headings we prefer to see above the result table.
            
            The select clause is the first clause and is one of the last clauses of the select statement that the database server evaluates. The reason for this is that before we can determine what to include in the final result set, we need to know all of the possible columns that could be included in the final result set.
            
            The syntax for the SELECT statement is:

                           SELECT column1 as c1
                           column2 as c2
                           ...
                           from table_name;

            'as c1' implies that the result table column that holds the data from column1 of the original table, will be identified as 'c1' and its usage is optional.
            
            To get the age of all our rows, we would run the first of the following query:

                           select age as myAge
                           from my_table;
                           
                           select * from my_table;
                           
                           Output:
                           
                           
                           | myAge |
                           | ----- |
                           |  47   |
                           
                           | first_name | age | employed |
                           | -------- | -------- | -------- |
                           | myName     | 47     | 1     |


            Notice something weird in the second query?
            
            Firstly there's an asterisk in place of specifying a column. What it does is signal to the DBMS that the user has requested all the data in the table, i.e. entry of every column for every row. Therefore the entire table is returned as it is.
            
            Secondly, we haven't used the operator here. thus the returned table columns have retained their original labels.
            
            We can select data as per our requirements by filtering. We have an array of methods, operators, functions, etc for this purpose. Suppose we need to fetch only those rows which qualify a certain criterion. We use a 'where' clause to fulfill this.
            
            Assume the present state of our table is as shown ;

                           select * from my_table;
                           
                           Output:
                           
                           
                           | first_name | age | employed |
                           | -------- | -------- | -------- |
                           | myName     | 47     | 1     |
                           | maName1 | 10 | 0 |
                           | myName2 | 20 | 0 |
                           | myName3 | 32 | 1 |


            Let's say that we need to fetch all rows where the age is strictly greater than 20. The query that we need is as follows:

                           select * from
                           my_table where age>20;
                           
                           Output:
                           
                           
                           | first_name | age | employed |
                           | -------- | -------- | -------- |
                           | myName     | 47     | 1     |
                           | myName2 | 32 | 1 |


            yes; it works!
            
            To extract all the rows where the name matches a certain pattern we use the 'like' operator. The following snippet shows its action:

                           select * from my_table
                           where first_name like "myName_";
                           
                           Output:
                           
                           
                           | first_name | age | employed |
                           | -------- | -------- | -------- |
                           | myName0     | 10     | 1     |
                           | maName1 | 10 | 0 |
                           | myName2 | 20 | 0 |


            'like' is an operator used for pattern matching. It uses two special characters embedded in the string to be matched; The percent sign '%' represents zero, one, or any number of characters, while the underscore sign '_' represents a single character.
            
            In the previous example, we used underscore, and therefore all rows except the first were returned because 'myName_' implies a matching string of the form 'myName' + an additional character. The last 3 strings are of this form and hence are matched, unlike the first one which does not have any additional character present at last.
            
            Similarly, we can obtain all the rows in the first_name field which ends with zero ('0').

                           select * from my_table
                           where first_name like "%0";
                           
                           Output:
                           
                           
                           | first_name | age | employed |
                           | -------- | -------- | -------- |
                           | myName0     | 10     | 0     |
